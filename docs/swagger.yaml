basePath: /
definitions:
  entities.CreateTaskResponse:
    properties:
      created_at:
        example: "2021-09-01T00:00:00Z"
        type: string
      date:
        example: "2021-09-01T00:00:00Z"
        type: string
      description:
        example: Description of task 1
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      image:
        example: fqfqf
        type: string
      status:
        example: IN_PROGRESS
        type: string
      title:
        example: Task 1
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  entities.ErrExampleIncorrectPassword:
    properties:
      code:
        example: 4002
        type: integer
      message:
        example: password is incorrect
        type: string
    type: object
  entities.ErrExampleInternalError:
    properties:
      code:
        example: 5000
        type: integer
      message:
        example: internal server error
        type: string
    type: object
  entities.ErrExampleInvalidRequest:
    properties:
      code:
        example: 2001
        type: integer
      details:
        items:
          $ref: '#/definitions/entities.FieldError'
        type: array
      message:
        example: invalid request body
        type: string
    type: object
  entities.ErrExampleTaskAlreadyExists:
    properties:
      code:
        example: 3002
        type: integer
      message:
        example: task already exists
        type: string
    type: object
  entities.ErrExampleTaskNotFound:
    properties:
      code:
        example: 3001
        type: integer
      message:
        example: task not found
        type: string
    type: object
  entities.ErrExampleUnauthorized:
    properties:
      code:
        example: 1001
        type: integer
      message:
        example: unauthorized
        type: string
    type: object
  entities.ErrExampleUserExists:
    properties:
      code:
        example: 4003
        type: integer
      message:
        example: user already exists
        type: string
    type: object
  entities.ErrExampleUserNotFound:
    properties:
      code:
        example: 4001
        type: integer
      message:
        example: user not found
        type: string
    type: object
  entities.FieldError:
    properties:
      field:
        example: title
        type: string
      message:
        example: Title is required
        type: string
    type: object
  entities.GetAllTasksResponse:
    properties:
      tasks:
        items:
          $ref: '#/definitions/entities.GetTaskResponse'
        type: array
      total:
        example: 1
        type: integer
    type: object
  entities.GetHealthUserResponse:
    properties:
      status:
        example: Healthy
        type: string
    type: object
  entities.GetTaskResponse:
    properties:
      created_at:
        example: "2021-09-01T00:00:00Z"
        type: string
      date:
        example: "2021-09-01T00:00:00Z"
        type: string
      description:
        example: Description of task 1
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      image:
        example: fqfqf
        type: string
      status:
        example: IN_PROGRESS
        type: string
      title:
        example: Task 1
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  entities.LoginRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  entities.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
    type: object
  entities.RegisterRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  entities.RegisterResponse:
    properties:
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      hash_password:
        example: password123
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_name:
        example: Doe
        type: string
    type: object
  entities.UpdateTaskResponse:
    properties:
      created_at:
        example: "2021-09-01T00:00:00Z"
        type: string
      date:
        example: "2021-09-01T00:00:00Z"
        type: string
      description:
        example: Description of task 1
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      image:
        example: fqfqf
        type: string
      status:
        example: IN_PROGRESS
        type: string
      title:
        example: Task 1
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample Hugeman Assignment backend using Go and Swagger. The
    project serves as a backend API for managing tasks and users.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Tech Exam Hugeman Assignment API
  version: "1.0"
paths:
  /api/v1/health:
    get:
      description: Returns status of the service
      responses:
        "200":
          description: Health check successful
          schema:
            $ref: '#/definitions/entities.GetHealthUserResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrExampleInternalError'
      summary: Health Check
      tags:
      - Health Check
  /api/v1/tasks:
    get:
      consumes:
      - application/json
      description: Get all tasks with optional search, sort, and pagination
      parameters:
      - description: Search by title or description
        in: query
        name: search
        type: string
      - description: 'Sort by field: title, created_at, status'
        in: query
        name: sort_by
        type: string
      - description: 'Order: asc or desc'
        in: query
        name: order
        type: string
      - description: Number of items per page (default 20)
        in: query
        name: limit
        type: integer
      - description: Offset (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tasks retrieved successfully
          schema:
            $ref: '#/definitions/entities.GetAllTasksResponse'
        "400":
          description: Invalid query params
          schema:
            $ref: '#/definitions/entities.ErrExampleInvalidRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrExampleUnauthorized'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrExampleInternalError'
      security:
      - BearerAuth: []
      summary: Get All Tasks
      tags:
      - Tasks
    post:
      consumes:
      - multipart/form-data
      description: Create a new task
      parameters:
      - description: Title
        in: formData
        name: title
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Status
        in: formData
        name: status
        required: true
        type: string
      - description: Date (RFC3339 format)
        in: formData
        name: date
        required: true
        type: string
      - description: Optional base64 image upload
        in: formData
        name: image
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.CreateTaskResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/entities.ErrExampleInvalidRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrExampleUnauthorized'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/entities.ErrExampleTaskNotFound'
        "409":
          description: Task already exists
          schema:
            $ref: '#/definitions/entities.ErrExampleTaskAlreadyExists'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrExampleInternalError'
      security:
      - BearerAuth: []
      summary: Create Task
      tags:
      - Tasks
  /api/v1/tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Task deleted successfully
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrExampleUnauthorized'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/entities.ErrExampleTaskNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrExampleInternalError'
      security:
      - BearerAuth: []
      summary: Delete Task
      tags:
      - Tasks
    get:
      consumes:
      - application/json
      description: Get a task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.GetTaskResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrExampleUnauthorized'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/entities.ErrExampleTaskNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrExampleInternalError'
      security:
      - BearerAuth: []
      summary: Get Task
      tags:
      - Tasks
    put:
      consumes:
      - multipart/form-data
      description: Update a task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Title
        in: formData
        name: title
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Status
        in: formData
        name: status
        type: string
      - description: Image
        in: formData
        name: image
        type: file
      responses:
        "200":
          description: Task updated successfully
          schema:
            $ref: '#/definitions/entities.UpdateTaskResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/entities.ErrExampleInvalidRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrExampleUnauthorized'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/entities.ErrExampleTaskNotFound'
        "409":
          description: Task already exists
          schema:
            $ref: '#/definitions/entities.ErrExampleTaskAlreadyExists'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrExampleInternalError'
      security:
      - BearerAuth: []
      summary: Update Task
      tags:
      - Tasks
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Register request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/entities.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/entities.RegisterResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/entities.ErrExampleInvalidRequest'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/entities.ErrExampleUserExists'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrExampleInternalError'
      summary: Register a new user
      tags:
      - Users
  /api/v1/users/login:
    post:
      consumes:
      - application/json
      description: Login a user with email and password
      parameters:
      - description: Login request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/entities.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in user
          schema:
            $ref: '#/definitions/entities.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/entities.ErrExampleInvalidRequest'
        "401":
          description: Password is incorrect
          schema:
            $ref: '#/definitions/entities.ErrExampleIncorrectPassword'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/entities.ErrExampleUserNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrExampleInternalError'
      summary: Login a user
      tags:
      - Users
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
